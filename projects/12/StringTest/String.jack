// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array _str;
    field int _curLength, _maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {

        let _curLength = 0;
        let _maxLength = Math.max(maxLength, 1);
        let _str = Array.new(_maxLength);

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(_str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return _curLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return _str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let _str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (_curLength = _maxLength) {
            return this;
        }
        let _str[_curLength] = c;
        let _curLength = _curLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (_curLength = 0) {
            return;
        }
        let _curLength = _curLength - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int pos, val;
        var boolean isNegative;

        let pos = 0;
        let isNegative = false;

        if ((_curLength > 0) & (_str[0] = 45)) {
            let isNegative = true;
            let pos = 1;
        }

        while (pos < _curLength) {
            if ((_str[pos] > 47) & (_str[pos] < 58)) {
                let val = val * 10 + (_str[pos] - 48);
            }
            let pos = pos + 1;
        }

        if (isNegative) {
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int tmp, divisor, digit;

        let _curLength = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }

        // find the highest power of 10
        let tmp = val;
        let divisor = 1;
        while (tmp > 9) {
            let tmp = tmp / 10;
            let divisor = divisor * 10;
        }

        let tmp = val;
        while (divisor > 0) {
            let digit = tmp / divisor;
            do appendChar(digit + 48);
            let tmp = tmp - (digit * divisor);
            let divisor = divisor / 10;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
