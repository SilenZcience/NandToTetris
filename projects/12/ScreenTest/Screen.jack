// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screenAddress;
    static boolean isColorBlack;

    /** Initializes the Screen. */
    function void init() {
        let screenAddress = 16384;
        let isColorBlack = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;

        while (i < 8192) { // 8192 == 131072 / 16 == (512 * 256) / 16
            let screenAddress[i] = 0;
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isColorBlack = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int i, shiftedBit, tmp;

        let i = 0;
        let shiftedBit = 1;
        while(i < (x & 15)) {  // (x & 15) == remainder of x divided by 16
            let shiftedBit = shiftedBit + shiftedBit;
            let i = i + 1;
        }

        let tmp = (y * 32) + (x / 16);
        if (isColorBlack) {
            let screenAddress[tmp] = screenAddress[tmp] |  shiftedBit;
        } else {
            let screenAddress[tmp] = screenAddress[tmp] & ~shiftedBit;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int tmp, x, y, dx, dy, a, b, diff;

        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;

            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        // let x = Math.min(x1, x2);
        // let y = Math.min(y1, y2);

        // let dx = Math.abs(x2 - x1);
        let dx = x2 - x1;
        let dy = Math.abs(y2 - y1);
        let a = 0;
        let b = 0;

        let diff = (a * dy) - (b * dx);
        while (~(a > dx) & ~(b > dy)) {
            if (y1 < y2) {
                do Screen.drawPixel(x1 + a, y1 + b);
            } else {
                do Screen.drawPixel(x1 + a, y1 - b);
            }

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        if (b > dy) {
            let b = dy;
        }
        while (~(a > dx)) {
            do Screen.drawPixel(x1 + a, y1 + b);
            let a = a + 1;
        }
        if (a > dx) {
            let a = dx;
        }
        while (~(b > dy)) {
            if (y1 < y2) {
                do Screen.drawPixel(x1 + a, y1 + b);
            } else {
                do Screen.drawPixel(x1 + a, y1 - b);
            }
            let b = b + 1;
        }

        // do Output.moveCursor(0, 0);
        // do Output.printInt(a);
        // do Output.printString(" ");
        // do Output.printInt(b);
        // do Output.printString(" ");
        // do Output.printInt(dx);
        // do Output.printString(" ");
        // do Output.printInt(dy);
        // do Output.printString(" ");
        // do Output.printInt(diff);

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
