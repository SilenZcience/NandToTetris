// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array mem;
    static Array freeList;

    static int heapLength;

    /** Initializes the class. */
    function void init() {
        let mem = 0;

        let heapLength = 14336; // 16384 - 2048

        let freeList = 2048;
        let freeList[0] = heapLength;
        let freeList[1] = null;



        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return mem[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let mem[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array segment, tmpSegment, allocatedSegment;
        var int segmentSize, bestFitSize;

        // find best Fit for segment:
        let segment = null;
        let tmpSegment = freeList;
        let bestFitSize = heapLength;

        while (~(tmpSegment = null)) {
            // segment needs to be at least size+1 because we have a header containing the size
            if (~(tmpSegment[0] < (size + 1)) & (tmpSegment[0] < (bestFitSize + 1))) {
                let segment = tmpSegment;
                let bestFitSize = tmpSegment[0] - 1;
            }
            let tmpSegment = tmpSegment[1];
        }


        // if no segment found, return null:
        if (segment = null) {
            return null;
        }

        // if segment found, allocate it:
        if (segment[0] > (size + 2)) {
            // find the allocated segment from the bottom of the segment
            let allocatedSegment = segment + segment[0] - size;
            // set the allocated segment size one position prior to the start of the allocated segment
            let allocatedSegment[-1] = size+1;
            // simply adjust the segment size to account for the allocation of size+header
            let segment[0] = segment[0] - (size + 1);
        } else {
            // segment length is exactly size+2 or size+1
            // -> we allocate the entire segment even if it may be to large by +1
            let allocatedSegment = segment + 1;

            // remove segment from freeList by changing the pointer of the previous segment
            let tmpSegment = freeList;
            if (tmpSegment = segment) {
                // if the segment is the first in the freeList, we simply set the freeList to the next segment
                let freeList = segment[1];
            } else {
                while (~(tmpSegment[1] = segment)) {
                    let tmpSegment = tmpSegment[1];
                }
                let tmpSegment[1] = segment[1];
            }

        }

        return allocatedSegment;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array tmpSegment, preTmpSegment;
        var boolean insertedO;

        let o = o - 1; // adjust to the header

        // defragmentation ....
        let insertedO = false;

        let tmpSegment = freeList;
        let preTmpSegment = null;
        while (~(tmpSegment = null)) {
            if ((tmpSegment + tmpSegment[0]) = o) {
                // the deallocated segment is directly after a free segment
                let tmpSegment[0] = tmpSegment[0] + o[0];

                let insertedO = true;
                let o = tmpSegment;
            }
            if ((o + o[0]) = tmpSegment) {
                // the deallocated segment is directly before a free segment
                let o[0] = o[0] + tmpSegment[0];
                let o[1] = tmpSegment[1]; // set the next pointer of the deallocated segment to the next pointer of the free segment

                if (preTmpSegment = null) {
                    // if the deallocated segment is the first in the freeList, we simply set the freeList to the deallocated segment
                    let freeList = o;
                } else {
                    // otherwise we set the next pointer of the previous segment to the deallocated segment
                    let preTmpSegment[1] = o;
                }

                let insertedO = true;
                let o = tmpSegment;
            }

            let preTmpSegment = tmpSegment;
            let tmpSegment = tmpSegment[1];
        }

        if (~insertedO) {
            let o[1] = freeList; // set the next pointer to the current freeList
            let freeList = o; // set the new freeList to the deallocated object
        }

        return;
    }
}
