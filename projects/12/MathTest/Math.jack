// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer).
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {

    // Initializes the Math library.
    function void init() {
        return;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, xShifted, i, iShifted;
        let sum = 0;
        let xShifted = x;
        let i = 0;
        let iShifted = 1;

        while (i < 16) {
            if (~((y & iShifted) = 0)) {
                let sum = sum + xShifted;
            }

            let xShifted = xShifted + xShifted;
            let iShifted = iShifted + iShifted;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q, quotient;
        var bool isPositive;

        let isPositive = ((x < 0) = (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        if ((x - (2 * q * y)) < y) {
            let quotient = q + q;
        } else {
            let quotient = q + q + 1;
        }
        if (~isPositive) {
            let quotient = -quotient;
        }
        return quotient;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, jShifted, tmp, tmpSqrt;

        let y = 0;
        let j = 7; // n/2 - 1 -> 16/2 - 1 = 7
        let jShifted = 128;

        while (j > -1) {
            let tmp = y + jShifted;
            let tmpSqrt = tmp * tmp;
            // do Output.printInt(tmpSqrt);
            // do Output.printString(" ");

            if ((tmpSqrt > 0) & ~(tmpSqrt > x)) {
                let y = tmp;
            }

            let j = j - 1;
            let jShifted = jShifted / 2;
        }

        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }
}
