class Projectile {
    field int x, y;
    field int radius, weaponType;
    field int vx, vy;
    field int vycycle;
    field boolean active;

    constructor Projectile new(int startX, int startY, int velocity, int angle, int weaponType_, Array sinTable, Array cosTable) {
        var int idx;
        let x = startX;
        let y = startY;
        let radius = (weaponType_ * 10) + 2;
        let weaponType = weaponType_;
        let active = true;
        let vycycle = 0;

        let idx = (angle + 100) / 5;
        // velocity is pipeLen, sin/cos are scaled by 1000
        let vx = (velocity * sinTable[idx]) / 2000; // scale down for game speed
        let vy = -((velocity * cosTable[idx]) / 2000); // negative because y increases downward


        // do Output.moveCursor(6, 0);
        // do Output.printInt(idx);
        // do Output.moveCursor(6, 3);
        // do Output.printInt(vx);
        // do Output.moveCursor(6, 6);
        // do Output.printInt(vy);

        return this;
    }

    method int getRadius() {
        return radius;
    }

    method int getWeaponType() {
        return weaponType;
    }

    method void update() {
        let vycycle = vycycle + 1;
        if (vycycle > 3) {
            let vycycle = 0;
            let vy = vy + 1;
        }

        do drawPath(x, y, x + vx, y + vy); // Draw smooth path
        return;
    }

    method void drawPath(int x0, int y0, int x1, int y1) {
        var int dx, dy, steps, i, px, py;
        let dx = x1 - x0;
        let dy = y1 - y0;
        let steps = Math.max(Math.abs(dx), Math.abs(dy));
        let i = 1;
        while (i < (steps + 1)) {
            do Screen.setColor(false);
            do draw(); // Clear previous position
            do Screen.setColor(true);
            let x = x0 + ((dx * i) / steps);
            let y = y0 + ((dy * i) / steps);
            do draw();
            do Sys.wait(2);
            let i = i + 1;
        }
        do Screen.setColor(false);
        do draw(); // Clear previous position
        do Screen.setColor(true);
        return;
    }

    method void draw() {
        var int size;
        let size = weaponType + 1;
        if ((y < size)) {
            return;
        }
        if ((x < size) | (x > (511 - size)) | (y > (255 - size))) {
            do deactivate(); // Deactivate if it goes below the screen
            return;
        }
        do Screen.drawCircle(x, y, size);
        return;
    }

    method boolean isActive() {
        return active;
    }

    method void deactivate() {
        let active = false;
        return;
    }

    method int getX() {
        return x;
    }
    method int getY() {
        return y;
    }

    method void free() {
		do Memory.deAlloc(this);
		return;
	}
}
