class Projectile {
    field int x;
    field int y;
    field int vx;
    field int vy;
    field int vycycle;
    field boolean active;


    constructor Projectile new(int startX, int startY, int velocity, int angle, Array sinTable, Array cosTable) {
        var int idx;
        let x = startX;
        let y = startY;
        let active = true;
        // angle: -90 to +90, in steps of 5
        let idx = (angle + 90) / 5;
        // velocity is pipeLen, sin/cos are scaled by 1000
        let vx = (velocity * sinTable[idx]) / 2000; // scale down for game speed
        let vy = -((velocity * cosTable[idx]) / 2000); // negative because y increases downward
        return this;
    }

    method void update() {
        do Screen.setColor(false);
        do draw(); // Clear previous position
        do Screen.setColor(true);
        let vycycle = vycycle + 1;
        if (vycycle > 3) { // Update every 5th frame
            let vycycle = 0;
            let vy = vy + 1; // gravity effect
        }
        let x = x + vx;
        let y = y + vy;
        do draw(); // Draw new position
        return;
    }

    method void draw() {
        if ((y < 2)) {
            return;
        }
        if ((x < 2) | (x > 509) | (y > 253)) {
            do deactivate(); // Deactivate if it goes below the screen
            return;
        }
        do Screen.drawCircle(x, y, 2);
        return;
    }

    method boolean isActive() {
        return active;
    }

    method void deactivate() {
        let active = false;
        return;
    }

    method int getX() {
        return x;
    }
    method int getY() {
        return y;
    }

    method void free() {
		do Memory.deAlloc(this);
		return;
	}
}
