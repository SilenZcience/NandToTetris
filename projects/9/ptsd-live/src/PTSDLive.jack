class PTSDLive {
    field Array groundHeights;
    field Tank playerTank;
    field Array allTanks;

    field int level;
    field int tankAmount;
    field int currentWeapon; // 0 = sniper, 1 = medium, 2 = big

    constructor PTSDLive new(int level_) {
        var int i;
        var Tank cTank;

        let level = level_;
        let tankAmount = Levels.tankAmount(level);
        let currentWeapon = 1;

        let groundHeights = Array.new(512);
        let allTanks = Array.new(tankAmount);
        do Levels.initLevel(level, groundHeights, allTanks);
        do drawGround();

        do Tank.init();
        let playerTank = allTanks[0];
        while (i < tankAmount) {
            let cTank = allTanks[i]; // Get each tank
            do cTank.draw(groundHeights); // Draw all tanks
            let i = i + 1;
        }

        do drawHealth();
        do drawFuel();
        return this;
    }

    method void drawGround() {
        var int i, j;
        let i = 0;
        // do Screen.setColor(true);
        while (i < 512) {
            let j = groundHeights[i];
            do Screen.drawLine(i, j, i, 255); // Draw vertical line
            let i = i + 1;
        }
        return;
    }

    method void drawHealth() {
        var int i, x, y, health;
        var Tank cTank;
        var String str;

        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 145, 12 * tankAmount);
        do Screen.setColor(true);

        let i = 0;
        while (i < tankAmount) {
            let cTank = allTanks[i];
            let x = cTank.getX();
            let y = cTank.getY();
            let health = cTank.getHealth();

            do Output.moveCursor(i, 4);
            if (i = 0) {
                let str = "Player HP: ";
                do Output.printString(str);
                do str.dispose();
            } else {
                let str = "Enemy";
                do Output.printString(str);
                do str.dispose();
                do Output.printInt(i);
                let str = " HP: ";
                do Output.printString(str);
                do str.dispose();
            }
            do Output.printInt(cTank.getHealth());

            let i = i + 1;
        }
        return;
    }

    method void drawFuel() {
        var int centerX, centerY, radius;
        var int sin, cos, idx, pipeX, pipeY;
        var Array sinTable, cosTable;
        var String str;

        do Screen.setColor(false);
        do Screen.drawRectangle(415, 0, 480, 60);
        do Screen.setColor(true);

        let sinTable = Tank.getSinTable(); // Get the precomputed trig table
        let cosTable = Tank.getCosTable(); // Get the precomputed trig table
        let radius = 25;
        let centerX = 454; // Center X of the meter
        let centerY = 28;  // Center Y of the meter

        do Screen.drawCircle(centerX, centerY, radius);
        do Screen.setColor(false);
        do Screen.drawCircle(centerX, centerY, radius-1);
        do Screen.setColor(true);
        do Screen.drawLine(centerX-radius, centerY, centerX+radius, centerY);
        do Screen.setColor(false);
        do Screen.drawRectangle(415, centerY+1, 480, 60);
        do Screen.setColor(true);

        do Output.moveCursor(1, 55);
        let str = "FUEL";
        do Output.printString(str);
        do str.dispose();

        let idx = 2 + ((playerTank.getFuel() * 36) / 100);
        let sin = sinTable[idx];
        let cos = cosTable[idx];

        let pipeX = Math.max(0, Math.min(511, centerX + ((25 * sin) / 1000)));
        let pipeY = Math.max(0, Math.min(255, centerY - ((25 * cos) / 1000)));

        do Screen.drawLine(centerX, centerY, pipeX, pipeY);

        do Screen.drawCircle(421, 10, 5);
        do Screen.setColor(false);
        do Screen.drawCircle(421, 10, 4);
        do Screen.setColor(true);
        do Screen.drawCircle(421, 10, currentWeapon + 1);

        return;
    }

    method void applyDamage(Projectile projectile) {
        var int i, pX, pY, radius, dx, dy, tankX, tankY, damage;
        var Tank cTank;
        let pX = projectile.getX();
        let pY = projectile.getY();
        let radius = projectile.getRadius();

        let i = 0;
        while (i < tankAmount) {
            let cTank = allTanks[i];
            let tankX = cTank.getX();
            let tankY = cTank.getY();

            let dx = Math.abs(tankX - pX) - 6;
            let dy = Math.abs(tankY - pY) - 4;

            // Debug output
            // do Output.moveCursor(i, 0);
            // do Output.printString("Tank ");
            // do Output.printInt(i);
            // do Output.printString(": tankX=");
            // do Output.printInt(tankX);
            // do Output.printString(", tankY=");
            // do Output.printInt(tankY);
            // do Output.printString(", pX=");
            // do Output.printInt(pX);
            // do Output.printString(", pY=");
            // do Output.printInt(pY);
            // do Output.printString(", dx=");
            // do Output.printInt(dx);
            // do Output.printString(", dy=");
            // do Output.printInt(dy);

            if ((dx < radius) & (dy < radius)) {
                if (projectile.getWeaponType() = 0) {
                    let damage = 80;
                }
                if (projectile.getWeaponType() = 1) {
                    let damage = 40;
                }
                if (projectile.getWeaponType() = 2) {
                    let damage = 20;
                }
                // Square distance check yields too large values ...
                do cTank.applyDamage(damage, groundHeights);
            }

            let i = i + 1;
        }
        return;
    }

    method void applyGravity() {
        var int i;
        var Tank cTank;
        let i = 0;
        while (i < tankAmount) {
            let cTank = allTanks[i];
            do Screen.setColor(false);
            do cTank.draw(groundHeights);
            do Screen.setColor(true);
            do cTank.setY(groundHeights[cTank.getX()] - 5); // Reset y position to ground level
            do cTank.draw(groundHeights);
            let i = i + 1;
        }
        return;
    }

    method void renderAllTanks() {
        var int i;
        var Tank cTank;
        let i = tankAmount -1;
        while (i > -1) {
            let cTank = allTanks[i];
            do cTank.draw(groundHeights);
            let i = i - 1;
        }
        return;
    }

    method boolean allEnemiesDestroyed() {
        var int i;
        var Tank cTank;
        let i = 1;
        while (i < tankAmount) {
            let cTank = allTanks[i];
            if (cTank.getHealth() > 0) {
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    method void enemyTurn() {
        var int i, dx, aiAngle, aiOffset, playerX, playerY, enemyX, enemyY, randA, randB;
        var Tank enemyTank;
        var Projectile projectile;

        let playerX = playerTank.getX();
        let playerY = playerTank.getY();

        let i = 1; // Start from 1, since 0 is the player tank
        while (i < tankAmount) {
            let enemyTank = allTanks[i];

            if (enemyTank.getHealth() > 0) {
                let enemyX = enemyTank.getX();
                let enemyY = enemyTank.getY();

                // Move enemy tank randomly
                let randA = LCGRandom.randRange(0, 2);
                if (randA < 2) {
                    let randB = LCGRandom.randRange(1, 50);
                    while ((randB > 0) & (Math.abs(enemyX - playerX) > 50)) {
                        if (randA = 0) {
                            do enemyTank.moveRight(groundHeights);
                        } else {
                            do enemyTank.moveLeft(groundHeights);
                        }
                        let randB = randB - 1;
                        do drawGround();
                        do renderAllTanks();
                        do Sys.wait(20);
                    }
                }

                let dx = Math.abs(enemyX - playerX);
                if ((dx < 261) & (enemyTank.getPipeLen() > 15)) {
                    do enemyTank.decreasePower(groundHeights);
                }

                let aiAngle = Tank.bestAIAngle(dx);
                // let aiOffset = Tank.bestAIOffset(aiAngle);
                if (playerX < enemyX) {
                    let aiAngle = - aiAngle;
                }
                // do Output.moveCursor(5, 0);
                // do Output.printInt(aiAngle);
                // do Output.moveCursor(5, 5);
                // do Output.printInt(enemyTank.getPipeAngle());
                while (enemyTank.getPipeAngle() < aiAngle) {
                    do enemyTank.rotateRight(groundHeights);
                }
                while (enemyTank.getPipeAngle() > aiAngle) {
                    do enemyTank.rotateLeft(groundHeights);
                }





                if (dx > 260) {
                    do enemyTank.increasePower(groundHeights);
                }

                do enemyTank.refuel();
                // Fire at player
                let projectile = enemyTank.fire(1, groundHeights, allTanks, tankAmount);
                do applyDamage(projectile);
                do projectile.free();
            }
            let i = i + 1;
            do drawGround();
            do applyGravity();
            do drawHealth();
            do drawFuel();
        }

        return;
    }

    method void switchWeapon() {
        let currentWeapon = currentWeapon + 1;
        if (currentWeapon > 2) {
            let currentWeapon = 0;
        }
        return;
    }

    method char getkeyPressed() {
        var char key;
        let key = Keyboard.keyPressed();
        if ((key = 32) | (key = 113) | (key = 81) | (key = 140)) { // Space, Q, ESC
            while (Keyboard.keyPressed() = key) {
                do Sys.wait(20);
            }
        }
        return key;
    }

    method boolean run() {
        var char key;
        var Projectile projectile;

        while (true) {
            let key = getkeyPressed();
            if ((key = 97) | (key = 65)) { // 'a' / 'A'
                do playerTank.moveLeft(groundHeights);
                do drawGround();
                do renderAllTanks();
                do drawFuel();
            }
            if ((key = 100) | (key = 68)) { // 'd' / 'D'
                do playerTank.moveRight(groundHeights);
                do drawGround();
                do renderAllTanks();
                do drawFuel();
            }
            if ((key = 130)) { // left arrow
                do playerTank.rotateLeft(groundHeights);
            }
            if ((key = 132)) { // right arrow
                do playerTank.rotateRight(groundHeights);
            }
            if ((key = 131)) { // up arrow
                do playerTank.increasePower(groundHeights);
            }
            if ((key = 133)) { // down arrow
                do playerTank.decreasePower(groundHeights);
            }
            if ((key = 32)) { // space bar
                let projectile = playerTank.fire(currentWeapon, groundHeights, allTanks, tankAmount);
                do playerTank.refuel();
                do applyDamage(projectile);
                do projectile.free();
                do drawGround();
                do applyGravity(); // also rerenders all tanks
                do drawHealth();
                do drawFuel();

                if (playerTank.getHealth() = 0) {
                    do Sys.wait(150);
                    return false;
                }
                if (allEnemiesDestroyed()) {
                    do Sys.wait(150);
                    return true;
                }

                do enemyTurn();

                if (playerTank.getHealth() = 0) {
                    do Sys.wait(150);
                    return false;
                }
                if (allEnemiesDestroyed()) {
                    do Sys.wait(150);
                    return true;
                }
            }
            if ((key = 113) | (key = 81)) { // 'q' / 'Q'
                do switchWeapon();
                do drawFuel();
            }
            if ((key = 140)) { // ESC-key
                return false;
            }

            do Sys.wait(50); // Small delay for animation



            // do Output.printChar(key);
        }
        return true;
    }

	method void free() {
        var int i;
        var Tank cTank;
        let i = 0;
        while (i < tankAmount) {
            let cTank = allTanks[i];
            do cTank.free();
            let i = i + 1;
        }
        do Tank.deinit();
        do groundHeights.dispose();
        do allTanks.dispose();
		do Memory.deAlloc(this);
		return;
	}
}
