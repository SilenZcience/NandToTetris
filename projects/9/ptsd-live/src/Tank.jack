class Tank {
    field int x, y;
    field int pipeAngle, pipeLen; // degrees, 0 = up
    field int health, fuel;
    field boolean destroyed;
    field boolean playerTank;

    static Array sinTable, cosTable;

    function void init() {
        let sinTable = Array.new(41);
        let cosTable = Array.new(41);
        do Tank.initTrigTables();
        return;
    }

    function void deinit() {
        do sinTable.dispose();
        do cosTable.dispose();
        return;
    }

    function void initTrigTables() {
        let sinTable[0] = -985; let cosTable[0] = -174; // -100°
        let sinTable[1] = -996; let cosTable[1] = -87; // -95°
        let sinTable[2] = -1000; let cosTable[2] = 0; // -90°
        let sinTable[3] = -996; let cosTable[3] = 87; // -85°
        let sinTable[4] = -985; let cosTable[4] = 174; // -80°
        let sinTable[5] = -966; let cosTable[5] = 259; // -75°
        let sinTable[6] = -940; let cosTable[6] = 342; // -70°
        let sinTable[7] = -906; let cosTable[7] = 423; // -65°
        let sinTable[8] = -866; let cosTable[8] = 500; // -60°
        let sinTable[9] = -819; let cosTable[9] = 574; // -55°
        let sinTable[10] = -766; let cosTable[10] = 643; // -50°
        let sinTable[11] = -707; let cosTable[11] = 707; // -45°
        let sinTable[12] = -643; let cosTable[12] = 766; // -40°
        let sinTable[13] = -574; let cosTable[13] = 819; // -35°
        let sinTable[14] = -500; let cosTable[14] = 866; // -30°
        let sinTable[15] = -423; let cosTable[15] = 906; // -25°
        let sinTable[16] = -342; let cosTable[16] = 940; // -20°
        let sinTable[17] = -259; let cosTable[17] = 966; // -15°
        let sinTable[18] = -174; let cosTable[18] = 985; // -10°
        let sinTable[19] = -87; let cosTable[19] = 996; // -5°
        let sinTable[20] = 0; let cosTable[20] = 1000; // 0°
        let sinTable[21] = 87; let cosTable[21] = 996; // 5°
        let sinTable[22] = 174; let cosTable[22] = 985; // 10°
        let sinTable[23] = 259; let cosTable[23] = 966; // 15°
        let sinTable[24] = 342; let cosTable[24] = 940; // 20°
        let sinTable[25] = 423; let cosTable[25] = 906; // 25°
        let sinTable[26] = 500; let cosTable[26] = 866; // 30°
        let sinTable[27] = 574; let cosTable[27] = 819; // 35°
        let sinTable[28] = 643; let cosTable[28] = 766; // 40°
        let sinTable[29] = 707; let cosTable[29] = 707; // 45°
        let sinTable[30] = 766; let cosTable[30] = 643; // 50°
        let sinTable[31] = 819; let cosTable[31] = 574; // 55°
        let sinTable[32] = 866; let cosTable[32] = 500; // 60°
        let sinTable[33] = 906; let cosTable[33] = 423; // 65°
        let sinTable[34] = 940; let cosTable[34] = 342; // 70°
        let sinTable[35] = 966; let cosTable[35] = 259; // 75°
        let sinTable[36] = 985; let cosTable[36] = 174; // 80°
        let sinTable[37] = 996; let cosTable[37] = 87; // 85°
        let sinTable[38] = 1000; let cosTable[38] = 0; // 90°
        let sinTable[39] = 996; let cosTable[39] = -87; // 95°
        let sinTable[40] = 985; let cosTable[40] = -174; // 100°
        return;
    }

    function Array getSinTable() {
        return sinTable;
    }
    function Array getCosTable() {
        return cosTable;
    }

    function void drawExplosion(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 128);
        do Memory.poke(memAddress + 32, 16704);
        do Memory.poke(memAddress + 64, 12610);
        do Memory.poke(memAddress + 96, 11820);
        do Memory.poke(memAddress + 128, 4660);
        do Memory.poke(memAddress + 160, 4232);
        do Memory.poke(memAddress + 192, 6280);
        do Memory.poke(memAddress + 224, 24902);
        do Memory.poke(memAddress + 256, -31183);
        do Memory.poke(memAddress + 288, 24902);
        do Memory.poke(memAddress + 320, 6280);
        do Memory.poke(memAddress + 352, 2180);
        do Memory.poke(memAddress + 384, 5668);
        do Memory.poke(memAddress + 416, 6490);
        do Memory.poke(memAddress + 448, 8518);
        do Memory.poke(memAddress + 480, 129);
        return;
    }

    function void eraseExplosion(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0,   0);
        do Memory.poke(memAddress + 32,  0);
        do Memory.poke(memAddress + 64,  0);
        do Memory.poke(memAddress + 96,  0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    constructor Tank new(int startX, int startY, boolean playerTank_) {
        let x = startX;
        let y = startY;
        let playerTank = playerTank_;
        let pipeAngle = 0;
        let pipeLen = 15;
        let health = 100;
        let fuel = 100;
        let destroyed = false;
        return this;
    }

    method void setX(int newX) {
        let x = newX;
        return;
    }

    method int getX() {
        return x;
    }

    method void setY(int newY) {
        let y = newY;
        return;
    }

    method int getY() {
        return y;
    }

    method int getHealth() {
        return health;
    }

    method int getFuel() {
        return fuel;
    }

    method void refuel() {
        let fuel = 100;
        return;
    }

    method void applyDamage(int damage, Array groundHeights) {
        var int location;
        if (destroyed) {
            return;
        }
        let health = Math.max(0, health - damage);

        if (health < 1) {
            do Screen.setColor(false);
            do draw(groundHeights); // Clear the tank
            do Screen.setColor(true);
            let location = ((y - 12) * 32) + ((x - 8) / 16);
            do Tank.drawExplosion(location); // Draw explosion
            do Sys.wait(1000); // Wait for explosion to finish
            do Tank.eraseExplosion(location); // Erase explosion
            let destroyed = true;
        }
        return;
    }

    method void moveLeft(Array groundHeights) {
        if ((x > 6) & (Math.abs(groundHeights[x - 7] - groundHeights[x]) < 15) & (fuel > 0)) {
            let fuel = fuel - 1; // Decrease fuel on movement
            do Screen.setColor(false);
            do draw(groundHeights); // Clear previous position
            do Screen.setColor(true);
            let x = x - 1;
            let y = groundHeights[x] - 5;
            do draw(groundHeights); // Draw new position
        }
        return;
    }

    method void moveRight(Array groundHeights) {
        if ((x < 504) & (Math.abs(groundHeights[x + 7] - groundHeights[x]) < 15) & (fuel > 0)) {
            let fuel = fuel - 1; // Decrease fuel on movement
            do Screen.setColor(false);
            do draw(groundHeights); // Clear previous position
            do Screen.setColor(true);
            let x = x + 1;
            let y = groundHeights[x] - 5;
            do draw(groundHeights); // Draw new position
        }
        return;
    }

    method void rotateLeft(Array groundHeights) {
        if (pipeAngle > -100) { // Limit left rotation
            do Screen.setColor(false);
            do draw(groundHeights); // Clear previous position
            do Screen.setColor(true);
            let pipeAngle = pipeAngle - 5;
            do draw(groundHeights); // Draw new position
        }
        return;
    }

    method void rotateRight(Array groundHeights) {
        if (pipeAngle < 100) { // Limit right rotation
            do Screen.setColor(false);
            do draw(groundHeights); // Clear previous position
            do Screen.setColor(true);
            let pipeAngle = pipeAngle + 5;
            do draw(groundHeights); // Draw new position
        }
        return;
    }

    method void decreasePower(Array groundHeights) {
        if (pipeLen > 9) { // Limit left rotation
            do Screen.setColor(false);
            do draw(groundHeights); // Clear previous position
            do Screen.setColor(true);
            let pipeLen = pipeLen - 1;
            do draw(groundHeights); // Draw new position
        }
        return;
    }

    method void increasePower(Array groundHeights) {
        if (pipeLen < 25) { // Limit right rotation
            do Screen.setColor(false);
            do draw(groundHeights); // Clear previous position
            do Screen.setColor(true);
            let pipeLen = pipeLen + 1;
            do draw(groundHeights); // Draw new position
        }
        return;
    }

    method Projectile fire(Array groundHeights, Array allTanks, int tankAmount) {
        var int pX, pY, idx, sin, cos, pipeX, pipeY, i;
        var int tankX, tankY, dx, dy;
        var Projectile projectile;
        var Tank cTank;
        let idx = (pipeAngle + 100) / 5;
        let sin = sinTable[idx];
        let cos = cosTable[idx];

        let pipeX = Math.max(0, Math.min(511, x + ((pipeLen * sin) / 1000)));
        let pipeY = Math.max(0, Math.min(255, y - ((pipeLen * cos) / 1000)));
        if (pipeY > groundHeights[pipeX]) {
            let pipeX = x;
            let pipeY = y;
        }
        let projectile = Projectile.new(pipeX, pipeY, pipeLen, pipeAngle, 12, sinTable, cosTable);

        while (projectile.isActive()) {
            do projectile.update();
            // do draw(groundHeights);
            let pX = projectile.getX();
            let pY = projectile.getY();

            // direct tank hit?
            let i = 0;
            while (i < tankAmount) {
                let cTank = allTanks[i];
                if (~(cTank = this)) {
                    let tankX = cTank.getX();
                    let tankY = cTank.getY();

                    let dx = Math.abs(tankX - pX) - 6;
                    let dy = Math.abs(tankY - pY) - 4;
                    if ((dx < projectile.getRadius()) & (dy < projectile.getRadius())) {
                        do destroyGround(groundHeights, pX, pY, projectile.getRadius());
                        do projectile.deactivate();
                        return projectile;
                    }
                }
                let i = i + 1;
            }

            // Hit the ground?
            if (pY > groundHeights[Math.max(0, Math.min(511, pX))]) {
                if ((pX > -1) & (pX < 512)) {
                    do destroyGround(groundHeights, pX, pY, projectile.getRadius());
                }
                do projectile.deactivate();
            } else {
                do Sys.wait(10);
            }
        }

        return projectile;
    }

    method void destroyGround(Array groundHeights, int centerX, int centerY, int radius) {
        var int i, dx, minX, maxX, newY;
        if ((centerX > radius) & (centerX < (511 - radius)) & (centerY > radius) & (centerY < (255 - radius))) {
            let i = 0;
            while (i < 3) {
                do Screen.setColor(true);
                do Screen.drawCircle(centerX, centerY, radius);
                do Sys.wait(60);
                do Screen.setColor(false);
                do Screen.drawCircle(centerX, centerY, radius);
                do Sys.wait(60);
                let i = i + 1;
            }
        }
        let minX = Math.max(centerX - radius, 0);
        let maxX = Math.min(centerX + radius, 511);
        let i = minX;
        do Screen.setColor(false);
        while (i < maxX) {
            let dx = i - centerX;
            let newY = centerY + radius - Math.abs(dx);
            if ((groundHeights[i] < (centerY - radius + Math.abs(dx)))) {
                let newY = groundHeights[i] + ((2 * radius) - (2 * Math.abs(dx)));
            }
            else {
                let newY = Math.max(groundHeights[i], newY);
            }
            let newY = Math.min(newY, 255);
            do Screen.drawLine(i, groundHeights[i], i, newY);
            let groundHeights[i] = newY;
            let i = i + 1;
        }
        do Screen.setColor(true);
        return;
    }

    method void draw(Array groundHeights) {
        var int i, pipeX, pipeY, idx, sin, cos;

        if (destroyed) {
            return;
        }

        // Draw the tank body
        do Screen.drawRectangle(x - 6, y - 4, x + 6, y + 4);


        // Draw the tank pipe
        let idx = (pipeAngle + 100) / 5;
        let sin = sinTable[idx];
        let cos = cosTable[idx];

        let pipeX = Math.max(0, Math.min(511, x + ((pipeLen * sin) / 1000)));
        let pipeY = Math.max(0, Math.min(255, y - ((pipeLen * cos) / 1000)));

        if (pipeY < groundHeights[pipeX]) {
            do Screen.drawLine(x, y, pipeX, pipeY);
        }

        if (playerTank) {
            do Screen.setColor(false);
            do Screen.drawLine(x - 4, y, x + 4, y);
            do Screen.drawLine(x, y - 2, x, y + 2);
            do Screen.setColor(true);
        }

        return;
    }

	method void free() {
		do Memory.deAlloc(this);
		return;
	}
}
