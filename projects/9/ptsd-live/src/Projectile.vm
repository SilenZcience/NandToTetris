function Projectile.new 1
push constant 8
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 4
push constant 10
call Math.multiply 2
push constant 2
add
pop this 2
push argument 4
pop this 3
push constant 0
not
pop this 7
push constant 0
pop this 6
push argument 3
push constant 100
add
push constant 5
call Math.divide 2
pop local 0
push argument 2
push local 0
push argument 5
add
pop pointer 1
push that 0
call Math.multiply 2
push constant 2000
call Math.divide 2
pop this 4
push argument 2
push local 0
push argument 6
add
pop pointer 1
push that 0
call Math.multiply 2
push constant 2000
call Math.divide 2
neg
pop this 5
push pointer 0
return
function Projectile.getRadius 0
push argument 0
pop pointer 0
push this 2
return
function Projectile.getWeaponType 0
push argument 0
pop pointer 0
push this 3
return
function Projectile.update 0
push argument 0
pop pointer 0
push this 6
push constant 1
add
pop this 6
push this 6
push constant 3
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop this 6
push this 5
push constant 1
add
pop this 5
label IF_FALSE0
push pointer 0
push this 0
push this 1
push this 0
push this 4
add
push this 1
push this 5
add
call Projectile.drawPath 5
pop temp 0
push constant 0
return
function Projectile.drawPath 6
push argument 0
pop pointer 0
push argument 3
push argument 1
sub
pop local 0
push argument 4
push argument 2
sub
pop local 1
push local 0
call Math.abs 1
push local 1
call Math.abs 1
call Math.max 2
pop local 2
push constant 1
pop local 3
label WHILE_EXP0
push local 3
push local 2
push constant 1
add
lt
not
if-goto WHILE_END0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Projectile.draw 1
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push local 0
push local 3
call Math.multiply 2
push local 2
call Math.divide 2
add
pop this 0
push argument 2
push local 1
push local 3
call Math.multiply 2
push local 2
call Math.divide 2
add
pop this 1
push pointer 0
call Projectile.draw 1
pop temp 0
push constant 2
call Sys.wait 1
pop temp 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Projectile.draw 1
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
return
function Projectile.draw 1
push argument 0
pop pointer 0
push this 3
push constant 1
add
pop local 0
push this 1
push local 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push this 0
push local 0
lt
push this 0
push constant 511
push local 0
sub
gt
or
push this 1
push constant 255
push local 0
sub
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
call Projectile.deactivate 1
pop temp 0
push constant 0
return
label IF_FALSE1
push this 0
push this 1
push local 0
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Projectile.isActive 0
push argument 0
pop pointer 0
push this 7
return
function Projectile.deactivate 0
push argument 0
pop pointer 0
push constant 0
pop this 7
push constant 0
return
function Projectile.getX 0
push argument 0
pop pointer 0
push this 0
return
function Projectile.getY 0
push argument 0
pop pointer 0
push this 1
return
function Projectile.free 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
